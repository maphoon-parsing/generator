
//  Copyright <2021> <Hans de Nivelle>
//
//  This software is released with the 3-clause BSD license, which 
//  is given below: 
// 
//  Redistribution and use in source and binary forms, with or without 
//  modification, are permitted provided that the following conditions are met:

//  Redistributions of source code must retain the above copyright notice, 
//  this list of conditions and the following disclaimer:

//  Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation 
//  and/or other materials provided with the distribution.
//  Neither the name of the copyright holder nor the names of its contributors 
//  may be used to endorse or promote products derived from this software 
//  without specific prior written permission.

//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
//  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
//  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
//  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
//  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED 
//  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
//  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
//  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


// Parser generated by Maphoon 2021.
// Written by Hans de Nivelle, March 2021.
// See the licence that was included with the code.

#include "parser.h"

#line 113 "ambiguous.m"


namespace {
   double fact( unsigned int n )
   {
      double res = 1.0;
      while( n )
      {
         res *= n;
         -- n;
      }
      return res;
   }

   void printerrors( const std::vector< std::string > & errors, 
                     std::ostream& out )
   {
      std::cout << "Errors:\n";
      for( const auto& err : errors )
         out << "   " << err << "\n";
   }

}
#line 141 "idee.x"


size_t 
parser::statesymbol::hash::operator( ) ( const statesymbol& ss ) const
{
   return ss.state + ( ss.type << 4 ) + ( ss.type );
}

bool
parser::statesymbol::equal_to::operator( ) ( const statesymbol& ss1,
                                                            const statesymbol& ss2 ) const
{
   return ss1. state == ss2. state && ss1. type == ss2. type;
}


// Definitions of the reduction functions:

void parser::body2( )
{
#line 154 "ambiguous.m"

   if( errorlog. size( ))
   {
      printerrors( errorlog, std::cout ); 
      errorlog. clear( ); 
   }
   else
      std::cout << "Result is " << (topsymbol(2).get<double>()) << "\n"; 
}

void parser::body3( )
{
#line 167 "ambiguous.m"

   if( errorlog. empty( )) 
   {
      std::cout << "assigning: " << (topsymbol(4).get<std::string>()) << " := " << (topsymbol(2).get<double>()) << "\n";
      memory. assign( (topsymbol(4).get<std::string>()), (topsymbol(2).get<double>()) ); 
   }
   else
   {
      printerrors( errorlog, std::cout ); 
      errorlog. clear( ); 
   }
}

void parser::body4( )
{
#line 180 "ambiguous.m"

   std::cout << "quitting\n"; timetosaygoodbye = true;
}

void parser::body5( )
{
#line 184 "ambiguous.m"

   std::cout << memory << "\n";
}

void parser::body6( )
{
#line 188 "ambiguous.m"

   std::cout << "recovered from syntax error\n\n";
}

double parser::body7( )
{
#line 193 "ambiguous.m"
 return (topsymbol(3).get<double>()) + (topsymbol(1).get<double>()); }

double parser::body8( )
{
#line 194 "ambiguous.m"
 return (topsymbol(3).get<double>()) - (topsymbol(1).get<double>()); }

double parser::body9( )
{
#line 195 "ambiguous.m"
 return (topsymbol(1).get<double>()); }

double parser::body10( )
{
#line 198 "ambiguous.m"
 return (topsymbol(3).get<double>()) * (topsymbol(1).get<double>()); }

double parser::body11( )
{
#line 201 "ambiguous.m"

   if( (topsymbol(1).get<double>()) == 0.0 ) 
   {
      errorlog. push_back( "division by zero" ); 
         (topsymbol(1).get<double>()) = 1.0;   // invent a value. 
   }
   return (topsymbol(3).get<double>()) / (topsymbol(1).get<double>());  
}

double parser::body12( )
{
#line 212 "ambiguous.m"

   if( (topsymbol(1).get<double>()) == 0.0 )
   {
      errorlog. push_back( "modulo by zero" );
      (topsymbol(1).get<double>()) = 1.0;
   }
    
   return (topsymbol(3).get<double>()) - (topsymbol(1).get<double>()) * floor( (topsymbol(3).get<double>()) / (topsymbol(1).get<double>()) ); 
}

double parser::body13( )
{
#line 222 "ambiguous.m"
 return (topsymbol(1).get<double>()); }

double parser::body14( )
{
#line 225 "ambiguous.m"
 return -(topsymbol(1).get<double>()); }

double parser::body15( )
{
#line 226 "ambiguous.m"
 return (topsymbol(1).get<double>()); }

double parser::body16( )
{
#line 227 "ambiguous.m"
 return (topsymbol(1).get<double>()); }

double parser::body17( )
{
#line 231 "ambiguous.m"

   unsigned int f = static_cast< unsigned int >
         ( floor( (topsymbol(2).get<double>()) + 0.0001 ));
   return fact(f);  
}

double parser::body18( )
{
#line 237 "ambiguous.m"
 return (topsymbol(2).get<double>()); }

double parser::body19( )
{
#line 239 "ambiguous.m"

   if( memory. contains((topsymbol(1).get<std::string>())))
      return *memory. lookup((topsymbol(1).get<std::string>()));
   else
   {
      errorlog. push_back( std::string( "variable " ) + (topsymbol(1).get<std::string>()) + 
                           " is undefined " );
      return 0.0;  
   }
}

double parser::body20( )
{
#line 250 "ambiguous.m"
 return (topsymbol(1).get<double>()); }

double parser::body21( )
{
#line 253 "ambiguous.m"
 
   if( (topsymbol(4).get<std::string>()) == "sin" && (topsymbol(2).get<std::vector<double>>()). size( ) == 1 ) 
      return sin( (topsymbol(2).get<std::vector<double>>())[0] ); 

   if( (topsymbol(4).get<std::string>()) == "cos" && (topsymbol(2).get<std::vector<double>>()). size( ) == 1 )
      return cos( (topsymbol(2).get<std::vector<double>>())[0] );

   if( (topsymbol(4).get<std::string>()) == "sqrt" && (topsymbol(2).get<std::vector<double>>()). size( ) == 1 )
      return sqrt( (topsymbol(2).get<std::vector<double>>())[0] ); 

   if( (topsymbol(4).get<std::string>()) == "pow" && (topsymbol(2).get<std::vector<double>>()). size( ) == 2 )
   {
      return pow( (topsymbol(2).get<std::vector<double>>())[0], (topsymbol(2).get<std::vector<double>>())[1] );
   }

   
   errorlog. push_back( std::string( "unrecognized function " ) + (topsymbol(4).get<std::string>()) );
   return 0.0;
}

std::vector<double> parser::body22( )
{
#line 275 "ambiguous.m"
  return { (topsymbol(1).get<double>()) };   }

std::vector<double> parser::body23( )
{
#line 276 "ambiguous.m"
 (topsymbol(3).get<std::vector<double>>()). push_back((topsymbol(1).get<double>())); return (topsymbol(3).get<std::vector<double>>()); }

short parser::cond24( ) const
{
#line 280 "ambiguous.m"
 return (topsymbol(1).get<std::string>()) == "quit"; }

short parser::cond25( ) const
{
#line 284 "ambiguous.m"
 return (topsymbol(1).get<std::string>()) == "show"; }



#line 1 "reduce"

void parser::reduce( symboltype lefttype,
               symbol::attrtype&& attr, size_t rightsize )
{
   if( debug >= 2 )
   {
      std::cout << "popping " << rightsize << " state/symbol from stack "; 
      std::cout << "and reducing into " << lefttype << "\n";
   }

#if true
   // This works only if symbol has an info type: 

   std::optional< symbol::infotype > info;
      // Look for the first symbol that has info:

   for( auto p = symbolstack. end( ) - rightsize; 
        p != symbolstack. end( ); ++ p ) 
   {
      // If we encounter first defined, we move into info. 
      // For later defineds, we call merge_infos( ).

      if( p -> info. has_value( )) 
      {
         if( info. has_value( ))
            merge_infos( info.value( ), std::move( p -> info.value() ));
         else
            info = std::move( p -> info );
      }
   }
#endif 

   while( rightsize )
   {
      statestack. pop_back( );
      symbolstack. pop_back( );
      -- rightsize; 
   }
  
   // It remains to do the goto: 

   statestack. push_back( shifts. at( { statestack. back( ), lefttype } ));

#if true
   symbolstack. emplace_back( lefttype, info, std::move( attr ));
#else
   symbolstack. emplace_back( lefttype, std::move( attr ));
#endif 
}

#line 1 "parse"

symbol 
parser::parse( symboltype startsym )
{
   if( debug >= 2 ) 
   {
      std::cout << "Starting parser:\n";

      if( ! std::is_nothrow_move_constructible<symbol> :: value )
      {
         std::cout << "class symbol is not nothrow move constructible\n";
         std::cout << "   (this causes loss of efficiency)\n"; 
      }
      else
      {
         std::cout << "class symbol is nothrow move constructible\n";
         std::cout << "   (that is good)\n";
      }
   }

   if( debug >= 1 && 
          startsymbols. find( startsym ) == startsymbols. end( ))
   {
      std::cout << "startsymbol " << startsym << " is not a start symbol\n";
   }
 
   const auto& startinfo = startsymbols. at( startsym );
   statestack. push_back( startinfo. first );
  
mainloop: 
   if( debug >= 1 ) 
      print( std::cout ); 

   if( timetosaygoodbye )
   {
      if( debug >= 2 ) 
         std::cout << "time to say goodbye\n";

      symbol res = std::move( symbolstack. back( ));
      symbolstack. pop_back( );
      statestack. pop_back( );
      return res; 
   }
 
   size_t shift = reductioninfo. size( );  // Means undefined. 
   std::vector< size_t > redcandidates;

   // Decide if our state is a simple state:

   const auto& redinfo = reductioninfo[ statestack. back( ) ]; 

   // If the state is non-trivial, we need a lookahead:

   if( redinfo. first != 'T' && !lookahead. has_value( )) 
      lookahead =  tokenizing::readsymbol( read ); 
  

   if( debug >= 3 && lookahead. has_value( ))
      std::cout << "lookahead " << lookahead. value( ) << "\n";

   switch( redinfo. first ) 
   {
   case 'N': 
   {
      auto p = shifts. find( 
               statesymbol( statestack.back( ), lookahead. value( ). type ));
      if( p != shifts. end( ))
         shift = p -> second;
      break;
   }
   case 'D':
   {
      auto p = shifts. find(
               statesymbol( statestack.back( ), lookahead. value( ). type ));
      if( p != shifts. end( ))
         shift = p -> second;
      else
         redcandidates. push_back( redinfo. second ); 
      break;
   }
   case 'H':
   {
      auto p = shifts. find(
               statesymbol( statestack. back( ), lookahead. value( ). type ));
      if( p != shifts. end( ))
         shift = p -> second; 
     
      auto q = reductions. find( 
               statesymbol( statestack. back( ), lookahead. value( ). type ));
      if( q != reductions. end( ))
         redcandidates = q -> second; 
      break;
   }
   case 'T':
      redcandidates. push_back( redinfo. second );
      break;   
   default:
      std::cout << redinfo.first << "\n";
      throw std::logic_error( "reduction info not recognized" );
   }
  
   if( debug >= 3 )
   { 
      if( shift != reductioninfo. size( ))
         std::cout << "shift candidate " << shift << "\n";

      if( redcandidates. size( )) 
      {
         std::cout << "reduction candidates: "; 
         for( size_t i = 0; i != redcandidates. size( ); ++ i )
            std::cout << redcandidates[i] << " ";
         std::cout << "\n";
      }
      else
         std::cout << "there are no reduction candidates\n";
   }

   // We need to find a reduction that agrees to be reduced: 

   for( const auto& r : redcandidates ) 
   {
      if( debug >= 3 ) 
         std::cout << "trying to reduce rule " << r << "\n";

      switch(r)
      {
      case 0:
         reduce( sym_Session, std::monostate( ), 2 );
         goto mainloop;
         break;
      case 1:
         reduce( sym_Session, std::monostate( ), 0 );
         goto mainloop;
         break;
      case 2:
         body2( );
         reduce( sym_Command, std::monostate( ), 2 );
         goto mainloop;
         break;
      case 3:
         body3( );
         reduce( sym_Command, std::monostate( ), 4 );
         goto mainloop;
         break;
      case 4:
         body4( );
         reduce( sym_Command, std::monostate( ), 2 );
         goto mainloop;
         break;
      case 5:
         body5( );
         reduce( sym_Command, std::monostate( ), 2 );
         goto mainloop;
         break;
      case 6:
         body6( );
         reduce( sym_Command, std::monostate( ), 2 );
         goto mainloop;
         break;
      case 7:
         reduce( sym_E, body7( ), 3 );
         goto mainloop;
         break;
      case 8:
         reduce( sym_E, body8( ), 3 );
         goto mainloop;
         break;
      case 9:
         reduce( sym_E, body9( ), 1 );
         goto mainloop;
         break;
      case 10:
         reduce( sym_F, body10( ), 3 );
         goto mainloop;
         break;
      case 11:
         reduce( sym_F, body11( ), 3 );
         goto mainloop;
         break;
      case 12:
         reduce( sym_F, body12( ), 3 );
         goto mainloop;
         break;
      case 13:
         reduce( sym_F, body13( ), 1 );
         goto mainloop;
         break;
      case 14:
         reduce( sym_G, body14( ), 2 );
         goto mainloop;
         break;
      case 15:
         reduce( sym_G, body15( ), 2 );
         goto mainloop;
         break;
      case 16:
         reduce( sym_G, body16( ), 1 );
         goto mainloop;
         break;
      case 17:
         reduce( sym_H, body17( ), 2 );
         goto mainloop;
         break;
      case 18:
         reduce( sym_H, body18( ), 3 );
         goto mainloop;
         break;
      case 19:
         reduce( sym_H, body19( ), 1 );
         goto mainloop;
         break;
      case 20:
         reduce( sym_H, body20( ), 1 );
         goto mainloop;
         break;
      case 21:
         reduce( sym_H, body21( ), 4 );
         goto mainloop;
         break;
      case 22:
         reduce( sym_Arguments, body22( ), 1 );
         goto mainloop;
         break;
      case 23:
         reduce( sym_Arguments, body23( ), 3 );
         goto mainloop;
         break;
      case 24:
         if( short s = cond24(); s > 0 )
         {
            reduce( sym_Quit, std::monostate( ), 1 );
            goto mainloop;
         }
         else
            if( s < 0 ) shift = reductioninfo. size( );
         break;
      case 25:
         if( short s = cond25(); s > 0 )
         {
            reduce( sym_Show, std::monostate( ), 1 );
            goto mainloop;
         }
         else
            if( s < 0 ) shift = reductioninfo. size( );
         break;
 
      default:
         throw std::logic_error( "reducing unknown rule" );  
      }
   }

   if( shift < reductioninfo. size( ))
   {
      if( debug >= 2 ) 
         std::cout << "shifting S" << shift << "\n";

      statestack. push_back( shift );
      symbolstack. push_back( std::move( lookahead. value( ) ));
      lookahead. reset( );

      if( lasterror < 10000 )
         ++ lasterror; 

      goto mainloop;
   }

   if( symbolstack. size( ) == 1 && symbolstack. front( ). type == startsym )
   {
      if( debug >= 2 ) 
         std::cout << "we accept the input\n";

      symbol res = std::move( symbolstack. front( ));
      symbolstack. clear( );
      statestack. pop_back( );
      return res;
   }

#line 1 "startpoint"

   unsigned int patience = syntaxerror( ); 
   if( patience ) 
   {
      if( debug >= 2 )
         std::cout << "trying to recover\n";

      if( debug >= 2 )
         std::cout << "patience remaining = " << patience << "\n";

      std::vector< std::pair< size_t, size_t >> shiftrecover; 
         // We collect the levels whose state can shift the  _recover_ 
         // symbol, 
         // combined with the states that will be reached after the shifts.

      for( size_t level = 0; level != statestack. size( ); ++ level )
      {
         size_t s = statestack[ level ];

         if( reductioninfo[s]. first == 'N' ||
             reductioninfo[s]. first == 'D' ||
             reductioninfo[s]. first == 'H' )
         {
            auto p = shifts. find( statesymbol( s, sym__recover_ ));
            if( p != shifts. end( ))
               shiftrecover. push_back( std::pair( level, p -> second ));
         }
      } 

      std::cout << "{";
      for( auto p = shiftrecover. begin( ); p != shiftrecover. end( ); ++ p )
      {
         if( p != shiftrecover. begin( ))
            std::cout << ", ";
         else
            std::cout << " ";
         std::cout << ( p -> first ) << "/" << ( p -> second );
      }
      std::cout << " }\n";

      if( shiftrecover. size( ) == 0 )
      {
         std::cout << "no recovering shifts found\n";
         std::cout << lookahead. value( ) << "\n";
         return lookahead. value( );
      }

      std::cout << "lookahead = " << lookahead. value( ) << "\n";

      // While we still have patience, and the lookahead is not
      // in the terminator set, we try to recover: 
 
      while( patience && 
             startinfo. second. count( lookahead. value( ). type ) == 0 )
      {
         // We look in shiftrecover for the highest level on
         // which we could shift current lookahead after shifting the 
         // _recover_ symbol. 

         size_t rec = shiftrecover. size( ); 
         while( rec != 0 ) 
         { 
            -- rec; 
            size_t s = shiftrecover[ rec ]. second; 
            
            if( reductioninfo[s]. first == 'N' ||
                reductioninfo[s]. first == 'D' ||
                reductioninfo[s]. first == 'H' )
            {
               auto after = shifts. find( 
                      statesymbol( s, lookahead. value( ). type ));

               if( after != shifts. end( ))
               {
                  std::cout << rec << " is candidate\n";
                  std::cout << "recovery will be into state ";
                  std::cout << after -> second << "\n";

                  while( statestack. size() > shiftrecover[ rec ]. first + 1 )
                  {
                     statestack. pop_back( );
                     symbolstack. pop_back( );  
                  } 
                  
                  statestack. push_back(s);
#if true
                  symbolstack. push_back( 
                     symbol( sym__recover_, 
                             std::optional< symbol::infotype > ( ))); 
#else
                  symbolstack. push_back( 
                     symbol( sym__recover_ ));
#endif 
                  statestack. push_back( after -> second );
                  symbolstack. push_back( std::move( lookahead. value( ) ));
                  lookahead. reset( );

                  lasterror = 0;

                  print( std::cout );  
                  std::cout <<  "we are recovered!" << "\n\n";
                  goto mainloop; 
               } 
            }
         }

         // We throw away the current lookahead,
         // and lose a bit of our patience. 

         std::cout << "not yet recovered, patience = " << patience << "\n";
         lookahead =  tokenizing::readsymbol( read ); 

         -- patience; 
      }
   }

   // That's it. Game over. We lost.

   if( debug )
   {
      if( !patience ) 
         std::cout << "recovery ran out of patience\n";
      else
         std::cout << "reached a terminator\n";
   }

#if true
   return symbol( sym__recover_,
                  std::optional< symbol::infotype > ( ) );
#else
   return symbol( sym__recover_ );
#endif

}

#if ! false 

unsigned int 
parser::syntaxerror( )
{
   if( lasterror > 3 ) 
   {
      std::cout << "this looks like a new syntax error\n"; 
      return 6;
   }
   else
   {
      std::cout << "this looks like a failed recovery\n";
      return 6 - lasterror;
         // Possible because lasterror <= 3.
   }   
}

#endif

void 
parser::print( std::ostream& out ) const
{
   out << "Statestack: ";
   for( auto s : statestack )
      out << "S" << s << " ";
   out << "\n";

   out << "Symbolstack: ";
   for( const auto& s : symbolstack )
      out << s << "  ";
   out << "\n";
   if( lasterror < 10000 )
      out << "last error was " << lasterror << " symbols ago\n";

}

std::unordered_map< symboltype, std::pair< size_t, std::unordered_set< symboltype >>> parser::startsymbols =
{
   { sym_Session, { 1, { sym_EOF }} },
   { sym_E, { 0, { sym_SEMICOLON }} }
};

std::vector< std::pair< char, size_t >> parser::reductioninfo =
{
   { 'N', 0 }, { 'D', 1 }, { 'T', 13 }, { 'T', 20 }, { 'N', 0 }, { 'D', 9 }, { 'N', 0 }, { 'N', 0 },
   { 'D', 16 }, { 'N', 0 }, { 'D', 19 }, { 'N', 0 }, { 'N', 0 }, { 'N', 0 }, { 'N', 0 }, { 'N', 0 },
   { 'N', 0 }, { 'N', 0 }, { 'T', 15 }, { 'T', 17 }, { 'T', 14 }, { 'N', 0 }, { 'N', 0 }, { 'N', 0 },
   { 'N', 0 }, { 'H', 0 }, { 'T', 0 }, { 'N', 0 }, { 'D', 7 }, { 'D', 8 }, { 'T', 10 }, { 'T', 11 },
   { 'T', 12 }, { 'T', 18 }, { 'D', 22 }, { 'N', 0 }, { 'T', 6 }, { 'T', 5 }, { 'T', 4 }, { 'N', 0 },
   { 'T', 2 }, { 'N', 0 }, { 'T', 21 }, { 'N', 0 }, { 'D', 23 }, { 'T', 3 }
};

parser::statesymbol::map< size_t > parser::shifts =
{
   { { 43, sym_PLUS }, 12 }, { { 41, sym_F }, 5 }, { { 41, sym_LPAR }, 6 }, { { 39, sym_DOUBLE }, 3 }, { { 12, sym_PLUS }, 7 },
   { { 9, sym_IDENTIFIER }, 10 }, { { 11, sym_H }, 8 }, { { 11, sym__recover_ }, 22 }, { { 11, sym_Command }, 26 }, { { 12, sym_MINUS }, 9 },
   { { 13, sym_IDENTIFIER }, 10 }, { { 15, sym_LPAR }, 6 }, { { 16, sym_DOUBLE }, 3 }, { { 43, sym_MINUS }, 13 }, { { 9, sym_LPAR }, 6 },
   { { 12, sym_F }, 28 }, { { 9, sym_DOUBLE }, 3 }, { { 6, sym_IDENTIFIER }, 10 }, { { 9, sym_PLUS }, 7 }, { { 8, sym_FACTORIAL }, 19 },
   { { 43, sym_SEMICOLON }, 45 }, { { 9, sym_H }, 8 }, { { 9, sym_MINUS }, 9 }, { { 44, sym_PLUS }, 12 }, { { 9, sym_G }, 20 },
   { { 4, sym_MINUS }, 13 }, { { 39, sym_PLUS }, 7 }, { { 1, sym_Session }, 11 }, { { 16, sym_LPAR }, 6 }, { { 12, sym_G }, 2 },
   { { 21, sym_E }, 34 }, { { 11, sym_Quit }, 24 }, { { 0, sym_G }, 2 }, { { 5, sym_MODULO }, 16 }, { { 21, sym_H }, 8 },
   { { 11, sym_IDENTIFIER }, 25 }, { { 7, sym_PLUS }, 7 }, { { 11, sym_E }, 27 }, { { 29, sym_TIMES }, 14 }, { { 11, sym_F }, 5 },
   { { 0, sym_H }, 8 }, { { 21, sym_G }, 2 }, { { 4, sym_PLUS }, 12 }, { { 11, sym_G }, 2 }, { { 5, sym_DIVIDES }, 15 },
   { { 35, sym_RPAR }, 42 }, { { 39, sym_LPAR }, 6 }, { { 15, sym_PLUS }, 7 }, { { 0, sym_F }, 5 }, { { 7, sym_G }, 18 },
   { { 11, sym_PLUS }, 7 }, { { 0, sym_DOUBLE }, 3 }, { { 41, sym_G }, 2 }, { { 15, sym_H }, 8 }, { { 7, sym_H }, 8 },
   { { 34, sym_MINUS }, 13 }, { { 0, sym_LPAR }, 6 }, { { 6, sym_H }, 8 }, { { 0, sym_E }, 4 }, { { 7, sym_MINUS }, 9 },
   { { 13, sym_F }, 29 }, { { 41, sym_PLUS }, 7 }, { { 6, sym_G }, 2 }, { { 0, sym_PLUS }, 7 }, { { 39, sym_IDENTIFIER }, 10 },
   { { 11, sym_Show }, 23 }, { { 44, sym_MINUS }, 13 }, { { 10, sym_LPAR }, 21 }, { { 11, sym_DOUBLE }, 3 }, { { 0, sym_MINUS }, 9 },
   { { 41, sym_DOUBLE }, 3 }, { { 6, sym_F }, 5 }, { { 0, sym_IDENTIFIER }, 10 }, { { 6, sym_PLUS }, 7 }, { { 12, sym_H }, 8 },
   { { 41, sym_IDENTIFIER }, 10 }, { { 7, sym_DOUBLE }, 3 }, { { 6, sym_LPAR }, 6 }, { { 21, sym_PLUS }, 7 }, { { 6, sym_MINUS }, 9 },
   { { 7, sym_IDENTIFIER }, 10 }, { { 11, sym_MINUS }, 9 }, { { 12, sym_IDENTIFIER }, 10 }, { { 41, sym_E }, 44 }, { { 14, sym_LPAR }, 6 },
   { { 15, sym_DOUBLE }, 3 }, { { 27, sym_SEMICOLON }, 40 }, { { 13, sym_G }, 2 }, { { 39, sym_G }, 2 }, { { 13, sym_H }, 8 },
   { { 28, sym_DIVIDES }, 15 }, { { 13, sym_PLUS }, 7 }, { { 14, sym_DOUBLE }, 3 }, { { 13, sym_LPAR }, 6 }, { { 22, sym_SEMICOLON }, 36 },
   { { 14, sym_G }, 30 }, { { 6, sym_DOUBLE }, 3 }, { { 39, sym_MINUS }, 9 }, { { 14, sym_H }, 8 }, { { 29, sym_DIVIDES }, 15 },
   { { 14, sym_PLUS }, 7 }, { { 23, sym_SEMICOLON }, 37 }, { { 15, sym_G }, 31 }, { { 21, sym_F }, 5 }, { { 14, sym_MINUS }, 9 },
   { { 15, sym_IDENTIFIER }, 10 }, { { 24, sym_SEMICOLON }, 38 }, { { 16, sym_G }, 32 }, { { 16, sym_H }, 8 }, { { 16, sym_PLUS }, 7 },
   { { 16, sym_MINUS }, 9 }, { { 41, sym_H }, 8 }, { { 15, sym_MINUS }, 9 }, { { 16, sym_IDENTIFIER }, 10 }, { { 17, sym_RPAR }, 33 },
   { { 5, sym_TIMES }, 14 }, { { 21, sym_LPAR }, 6 }, { { 17, sym_MINUS }, 13 }, { { 17, sym_PLUS }, 12 }, { { 21, sym_MINUS }, 9 },
   { { 21, sym_IDENTIFIER }, 10 }, { { 13, sym_MINUS }, 9 }, { { 6, sym_E }, 17 }, { { 14, sym_IDENTIFIER }, 10 }, { { 39, sym_H }, 8 },
   { { 21, sym_DOUBLE }, 3 }, { { 21, sym_Arguments }, 35 }, { { 25, sym_LPAR }, 21 }, { { 41, sym_MINUS }, 9 }, { { 7, sym_LPAR }, 6 },
   { { 25, sym_BECOMES }, 39 }, { { 28, sym_TIMES }, 14 }, { { 27, sym_MINUS }, 13 }, { { 27, sym_PLUS }, 12 }, { { 12, sym_DOUBLE }, 3 },
   { { 11, sym_LPAR }, 6 }, { { 28, sym_MODULO }, 16 }, { { 39, sym_E }, 43 }, { { 12, sym_LPAR }, 6 }, { { 13, sym_DOUBLE }, 3 },
   { { 29, sym_MODULO }, 16 }, { { 34, sym_PLUS }, 12 }, { { 35, sym_COMMA }, 41 }, { { 39, sym_F }, 5 }
};

parser::statesymbol::map< std::vector< size_t >> parser::reductions =
{
   { { 25, sym_SEMICOLON }, { 24, 25, 19 } }, { { 25, sym_PLUS }, { 19 } }, { { 25, sym_MINUS }, { 19 } }, { { 25, sym_TIMES }, { 19 } },
   { { 25, sym_DIVIDES }, { 19 } }, { { 25, sym_FACTORIAL }, { 19 } }, { { 25, sym_MODULO }, { 19 } }
};



