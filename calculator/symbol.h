
//  Copyright <2021> <Hans de Nivelle>
//
//  This software is released with the 3-clause BSD license, which 
//  is given below: 
// 
//  Redistribution and use in source and binary forms, with or without 
//  modification, are permitted provided that the following conditions are met:

//  Redistributions of source code must retain the above copyright notice, 
//  this list of conditions and the following disclaimer:

//  Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation 
//  and/or other materials provided with the distribution.
//  Neither the name of the copyright holder nor the names of its contributors 
//  may be used to endorse or promote products derived from this software 
//  without specific prior written permission.

//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
//  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
//  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
//  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
//  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED 
//  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
//  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
//  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


// The code below was generated by Maphoon 2021.

// Definition of struct symbol:

#ifndef SYMBOL
#define SYMBOL    1

#include <iostream>
#include <variant>
#include <optional>
#include <stdexcept>

#line 54 "ambiguous.m"
 #include "varstore.h" 
 #include <math.h> 
 #include <vector> 

struct location 
{
   const std::string* filename; 
   long unsigned int line;
   long unsigned int column;

   location( const std::string* filename,
             long unsigned int line,
             long unsigned int column )
      : filename( filename ),
        line( line ),
        column( column )
   { }

};

   std::ostream& operator << ( std::ostream& , const location& ); 


enum symboltype
{
   sym__recover_, sym_EMPTY, sym_WHITESPACE, sym_Show, 
   sym_Session, sym_Arguments, sym_Quit, sym_Command, 
   sym_F, sym_H, sym_G, sym_RPAR, 
   sym_LPAR, sym_EOF, sym_SCANERROR, sym_COMMENT, 
   sym_SEMICOLON, sym_IDENTIFIER, sym_BECOMES, sym_COMMA, 
   sym_DOUBLE, sym_PLUS, sym_TIMES, sym_MINUS, 
   sym_DIVIDES, sym_E, sym_MODULO, sym_FACTORIAL
};

const char* getcstring( symboltype );

inline std::ostream& operator << ( std::ostream& out, symboltype tp )
   { out << getcstring( tp );  return out; }

struct symbol
{
   using attrtype = std::variant < std::monostate, std::string, double, 
         std::vector<double> > ;

   using infotype = location;

   symboltype type;
   std::optional<infotype> info;
   attrtype attr;

   symbol( ) = delete;
   symbol( const symbol& ) = default;
   symbol( symbol&& ) noexcept = default;
   symbol& operator = ( const symbol& ) = default;
   symbol& operator = ( symbol&& ) noexcept = default;
   ~symbol( ) = default;

   symbol( symboltype type,
           const std::optional<infotype> & info )
    : type( type ),
      info( info )
   { }

   symbol( symboltype type,
           const std::optional<infotype> & info,
           attrtype && attr )
    : type( type ),
      info( info ),
      attr( std::move( attr ))
   { }

   symbol( symboltype type,
           const std::optional<infotype> & info,
           const std::string & attr )
    : type( type ),
      info( info ),
      attr( attr )
   { }

   symbol( symboltype type,
           const std::optional<infotype> & info,
           std::string && attr )
    : type( type ),
      info( info ),
      attr( std::move( attr ))
   { }

   symbol( symboltype type,
           const std::optional<infotype> & info,
           double attr )
    : type( type ),
      info( info ),
      attr( attr )
   { }

   symbol( symboltype type,
           const std::optional<infotype> & info,
           const std::vector<double> & attr )
    : type( type ),
      info( info ),
      attr( attr )
   { }

   symbol( symboltype type,
           const std::optional<infotype> & info,
           std::vector<double> && attr )
    : type( type ),
      info( info ),
      attr( std::move( attr ))
   { }


   void print( std::ostream& out ) const;

   template< typename T > const T& get( ) const
      { return std::get<T> ( attr ); }
   
   template< typename T > T& get( )
      { return std::get<T> ( attr ); }
   
};

inline
std::ostream& operator << ( std::ostream& out, const symbol& sym )
   { sym. print( out ); return out; }


#endif


