
//  Copyright <2021> <Hans de Nivelle>
//
//  This software is released with the 3-clause BSD license, which 
//  is given below: 
// 
//  Redistribution and use in source and binary forms, with or without 
//  modification, are permitted provided that the following conditions are met:

//  Redistributions of source code must retain the above copyright notice, 
//  this list of conditions and the following disclaimer:

//  Redistributions in binary form must reproduce the above copyright notice, 
//  this list of conditions and the following disclaimer in the documentation 
//  and/or other materials provided with the distribution.
//  Neither the name of the copyright holder nor the names of its contributors 
//  may be used to endorse or promote products derived from this software 
//  without specific prior written permission.

//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
//  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
//  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
//  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
//  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED 
//  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
//  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
//  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


// The code below was generated by Maphoon 2021.

// Definition of struct symbol:

#ifndef SYMBOL
#define SYMBOL    1

#include <iostream>
#include <variant>
#include <optional>
#include <stdexcept>

#line 36 "grammar.m"
 #include "form.h" 

enum symboltype
{
   sym_NUMBER, sym__recover_, sym_WHITESPACE, sym_BECOMES, 
   sym_EOF, sym_RETURN, sym_COMMENT, sym_ERROR, 
   sym_DIAEND, sym_Session, sym_DIASTART, sym_OR, 
   sym_SEMICOLON, sym_Var, sym_EQUIV, sym_BOX, 
   sym_Formula, sym_DIA, sym_Command, sym_CONST, 
   sym_LEFTPAR, sym_Index, sym_NOT, sym_ID, 
   sym_RIGHTPAR, sym_IMP, sym_BOXSTART, sym_AND, 
   sym_BOXEND, sym_NNF, sym_METAVAR
};

const char* getcstring( symboltype );

inline std::ostream& operator << ( std::ostream& out, symboltype tp )
   { out << getcstring( tp );  return out; }

struct symbol
{
   using attrtype = std::variant < std::monostate, agent, bool, 
         form, std::string, unsigned int > ;

   symboltype type;
   attrtype attr;

   symbol( ) = delete;
   symbol( const symbol& ) = default;
   symbol( symbol&& ) noexcept = default;
   symbol& operator = ( const symbol& ) = default;
   symbol& operator = ( symbol&& ) noexcept = default;
   ~symbol( ) = default;

   symbol( symboltype type )
    : type( type )
   { }

   symbol( symboltype type,
           attrtype && attr )
    : type( type ),
      attr( std::move( attr ))
   { }

   symbol( symboltype type,
           const agent & attr )
    : type( type ),
      attr( attr )
   { }

   symbol( symboltype type,
           agent && attr )
    : type( type ),
      attr( std::move( attr ))
   { }

   symbol( symboltype type,
           bool attr )
    : type( type ),
      attr( attr )
   { }

   symbol( symboltype type,
           const form & attr )
    : type( type ),
      attr( attr )
   { }

   symbol( symboltype type,
           form && attr )
    : type( type ),
      attr( std::move( attr ))
   { }

   symbol( symboltype type,
           const std::string & attr )
    : type( type ),
      attr( attr )
   { }

   symbol( symboltype type,
           std::string && attr )
    : type( type ),
      attr( std::move( attr ))
   { }

   symbol( symboltype type,
           unsigned int attr )
    : type( type ),
      attr( attr )
   { }


   void print( std::ostream& out ) const;

   template< typename T > const T& get( ) const
      { return std::get<T> ( attr ); }
   
   template< typename T > T& get( )
      { return std::get<T> ( attr ); }
   
};

inline
std::ostream& operator << ( std::ostream& out, const symbol& sym )
   { sym. print( out ); return out; }


#endif


